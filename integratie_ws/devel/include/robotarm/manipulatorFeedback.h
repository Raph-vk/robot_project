// Generated by gencpp from file robotarm/manipulatorFeedback.msg
// DO NOT EDIT!


#ifndef ROBOTARM_MESSAGE_MANIPULATORFEEDBACK_H
#define ROBOTARM_MESSAGE_MANIPULATORFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotarm
{
template <class ContainerAllocator>
struct manipulatorFeedback_
{
  typedef manipulatorFeedback_<ContainerAllocator> Type;

  manipulatorFeedback_()
    : tandenborstel_opgepakt(false)  {
    }
  manipulatorFeedback_(const ContainerAllocator& _alloc)
    : tandenborstel_opgepakt(false)  {
  (void)_alloc;
    }



   typedef uint8_t _tandenborstel_opgepakt_type;
  _tandenborstel_opgepakt_type tandenborstel_opgepakt;





  typedef boost::shared_ptr< ::robotarm::manipulatorFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotarm::manipulatorFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct manipulatorFeedback_

typedef ::robotarm::manipulatorFeedback_<std::allocator<void> > manipulatorFeedback;

typedef boost::shared_ptr< ::robotarm::manipulatorFeedback > manipulatorFeedbackPtr;
typedef boost::shared_ptr< ::robotarm::manipulatorFeedback const> manipulatorFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotarm::manipulatorFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotarm::manipulatorFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotarm::manipulatorFeedback_<ContainerAllocator1> & lhs, const ::robotarm::manipulatorFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.tandenborstel_opgepakt == rhs.tandenborstel_opgepakt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotarm::manipulatorFeedback_<ContainerAllocator1> & lhs, const ::robotarm::manipulatorFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotarm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotarm::manipulatorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotarm::manipulatorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotarm::manipulatorFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13244125ac2eb6e745592ab638bae6b5";
  }

  static const char* value(const ::robotarm::manipulatorFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13244125ac2eb6e7ULL;
  static const uint64_t static_value2 = 0x45592ab638bae6b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotarm/manipulatorFeedback";
  }

  static const char* value(const ::robotarm::manipulatorFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"bool tandenborstel_opgepakt\n"
;
  }

  static const char* value(const ::robotarm::manipulatorFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tandenborstel_opgepakt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct manipulatorFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotarm::manipulatorFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotarm::manipulatorFeedback_<ContainerAllocator>& v)
  {
    s << indent << "tandenborstel_opgepakt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tandenborstel_opgepakt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTARM_MESSAGE_MANIPULATORFEEDBACK_H
