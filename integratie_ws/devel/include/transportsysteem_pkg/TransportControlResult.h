// Generated by gencpp from file transportsysteem_pkg/TransportControlResult.msg
// DO NOT EDIT!


#ifndef TRANSPORTSYSTEEM_PKG_MESSAGE_TRANSPORTCONTROLRESULT_H
#define TRANSPORTSYSTEEM_PKG_MESSAGE_TRANSPORTCONTROLRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace transportsysteem_pkg
{
template <class ContainerAllocator>
struct TransportControlResult_
{
  typedef TransportControlResult_<ContainerAllocator> Type;

  TransportControlResult_()
    : gelukt(false)
    , bericht()  {
    }
  TransportControlResult_(const ContainerAllocator& _alloc)
    : gelukt(false)
    , bericht(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _gelukt_type;
  _gelukt_type gelukt;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _bericht_type;
  _bericht_type bericht;





  typedef boost::shared_ptr< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> const> ConstPtr;

}; // struct TransportControlResult_

typedef ::transportsysteem_pkg::TransportControlResult_<std::allocator<void> > TransportControlResult;

typedef boost::shared_ptr< ::transportsysteem_pkg::TransportControlResult > TransportControlResultPtr;
typedef boost::shared_ptr< ::transportsysteem_pkg::TransportControlResult const> TransportControlResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator1> & lhs, const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator2> & rhs)
{
  return lhs.gelukt == rhs.gelukt &&
    lhs.bericht == rhs.bericht;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator1> & lhs, const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace transportsysteem_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8b436ede0ab289199df25c7e6703001";
  }

  static const char* value(const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8b436ede0ab2891ULL;
  static const uint64_t static_value2 = 0x99df25c7e6703001ULL;
};

template<class ContainerAllocator>
struct DataType< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transportsysteem_pkg/TransportControlResult";
  }

  static const char* value(const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"bool gelukt\n"
"string bericht\n"
;
  }

  static const char* value(const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gelukt);
      stream.next(m.bericht);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransportControlResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transportsysteem_pkg::TransportControlResult_<ContainerAllocator>& v)
  {
    s << indent << "gelukt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gelukt);
    s << indent << "bericht: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bericht);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSPORTSYSTEEM_PKG_MESSAGE_TRANSPORTCONTROLRESULT_H
