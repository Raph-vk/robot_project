# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xarm_msgs/VeloMoveMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VeloMoveMsg(genpy.Message):
  _md5sum = "3ff5ed26eb25726c663dac7efa05cc61"
  _type = "xarm_msgs/VeloMoveMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# request: command specification for velocity executions.
# Units:
#	joint space/angles: radian/s
#	Cartesian space: mm/s, radian/s.

# speeds: the velocity list of the joints/tcp
#   For velo_move_joint_timed topic: [joint1_velocity, ..., joint7_velocity]
#   For velo_move_line_timed topic: [x_velocity, y_velocity, z_velocity, rx_velocity, ry_velocity, rz_velocity (axis-angle)]
float32[] speeds

# is_sync: this is special for velo_move_joint_timed topic, meaning whether all joints accelerate and decelerate synchronously, true for yes, false for no.
# avaiable for topic velo_move_joint_timed
bool is_sync

# is_tool_coord: this is special for velo_move_line_timed topic, meaning whether motion is in tool coordinate(true) or not(false)
# avaiable for topic velo_move_line_timed
bool is_tool_coord

# the maximum duration of the speed, over this time will automatically set the speed to 0
#   duration > 0: seconds, indicates the maximum number of seconds that this speed can be maintained
#   duration == 0: always effective, will not stop automativally
#   duration < 0: only used to be compatible with the old protocol, equivalent to 0
# avaiable for firmware_version >= 1.8.0
float32 duration"""
  __slots__ = ['speeds','is_sync','is_tool_coord','duration']
  _slot_types = ['float32[]','bool','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speeds,is_sync,is_tool_coord,duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VeloMoveMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.speeds is None:
        self.speeds = []
      if self.is_sync is None:
        self.is_sync = False
      if self.is_tool_coord is None:
        self.is_tool_coord = False
      if self.duration is None:
        self.duration = 0.
    else:
      self.speeds = []
      self.is_sync = False
      self.is_tool_coord = False
      self.duration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.speeds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.speeds))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.is_sync, _x.is_tool_coord, _x.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.speeds = s.unpack(str[start:end])
      _x = self
      start = end
      end += 6
      (_x.is_sync, _x.is_tool_coord, _x.duration,) = _get_struct_2Bf().unpack(str[start:end])
      self.is_sync = bool(self.is_sync)
      self.is_tool_coord = bool(self.is_tool_coord)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.speeds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.speeds.tostring())
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.is_sync, _x.is_tool_coord, _x.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.speeds = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 6
      (_x.is_sync, _x.is_tool_coord, _x.duration,) = _get_struct_2Bf().unpack(str[start:end])
      self.is_sync = bool(self.is_sync)
      self.is_tool_coord = bool(self.is_tool_coord)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf = None
def _get_struct_2Bf():
    global _struct_2Bf
    if _struct_2Bf is None:
        _struct_2Bf = struct.Struct("<2Bf")
    return _struct_2Bf
